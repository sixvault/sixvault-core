datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id              Int         @id @default(autoincrement())
    nim_nip         String      @unique
    nama            String
    rsaPublicKey    String      @db.Text
    type            UserType
    prodi           ProdiType
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    mahasiswa       Mahasiswa?  @relation("UserToMahasiswa")
    dosenWali       DosenWali?  @relation("UserToDosenWali")
    kaprodi         Kaprodi?    @relation("UserToKaprodi")
}

model Mahasiswa {
    id          Int         @id @default(autoincrement())
    nim_nip     String      @unique
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    user        User?       @relation("UserToMahasiswa", fields: [nim_nip], references: [nim_nip])
}

model DosenWali {
    id          Int         @id @default(autoincrement())
    nim_nip     String      @unique
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    user        User?       @relation("UserToDosenWali", fields: [nim_nip], references: [nim_nip])
}

model Kaprodi {
    id          Int         @id @default(autoincrement())
    nim_nip     String      @unique
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
    user        User?       @relation("UserToKaprodi", fields: [nim_nip], references: [nim_nip])
}

model MataKuliah {
    id          Int         @id @default(autoincrement())
    kode        String      @unique
    matakuliah  String
    sks         Int
}

model DaftarNilai {
  id              Int          @id @default(autoincrement())
  nim             String
  kode            String
  nama            String
  nip_dosen       String
  nilai           String       // Adjust if enum or JSON

  shares          Share[]
  key_requests    KeyRequest[]
  self_key        SelfKey?
}

model Share {
  id              Int          @id @default(autoincrement())
  daftar_nilai_id Int
  nip             String       // Teacher NIP
  share_index     Int
  share_value     String
  is_advisor      Boolean
  is_accepted     Boolean

  daftar_nilai    DaftarNilai  @relation(fields: [daftar_nilai_id], references: [id])

  @@unique([daftar_nilai_id, nip])
}

model KeyRequest {
  id              Int          @id @default(autoincrement())
  daftar_nilai_id Int
  requester_nip   String
  status          String       // "pending", "approved", etc.
  created_at      DateTime     @default(now())

  daftar_nilai    DaftarNilai  @relation(fields: [daftar_nilai_id], references: [id])
  approvals       Approval[]
}

model Approval {
  id              Int          @id @default(autoincrement())
  key_request_id  Int
  teacher_nip     String
  approved        Boolean
  approved_at     DateTime     @default(now())

  key_request     KeyRequest   @relation(fields: [key_request_id], references: [id])

  @@unique([key_request_id, teacher_nip])
}

model SelfKey {
  id                    Int          @id @default(autoincrement())
  daftar_nilai_id       Int
  rsa_encrypted_aes_key String       @db.Text
  created_at            DateTime     @default(now())

  daftar_nilai          DaftarNilai  @relation(fields: [daftar_nilai_id], references: [id])

  @@unique([daftar_nilai_id])
}

enum UserType {
    mahasiswa
    dosen_wali
    kaprodi
    admin
}

enum ProdiType {
    teknik_informatika
    sistem_dan_teknologi_informasi
}

enum NilaiType {
    A
    AB
    B
    BC
    C
    D
}
